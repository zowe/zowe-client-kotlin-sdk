/*
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBA Group 2020
 */

 buildscript {
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1'
  }
}


plugins {
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.6.21'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply from: 'gradle/sonar.gradle'

archivesBaseName = 'kotlinsdk'
group 'org.zowe'
version projectVersion



java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib"
  implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.21"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  implementation 'com.squareup.retrofit2:retrofit:2.9.0',
                 'com.squareup.retrofit2:converter-gson:2.9.0',
                 'com.squareup.retrofit2:converter-scalars:2.9.0',
                 'com.google.code.gson:gson:2.9.0',
                 'com.starxg:java-keytar:1.0.0',
                 'org.yaml:snakeyaml:1.30',
                 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

test {
  useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.toString()
    languageVersion = org.jetbrains.kotlin.config.LanguageVersion.LATEST_STABLE.versionString
  }
}

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}

signing {
  sign configurations.archives
  required {
    // signing is required if this is a release version and the artifacts are to be published
    !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
      gradle.taskGraph.hasTask it
    }
  }
  sign publishing.publications
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      customizePom(pom)
      groupId 'org.zowe'
      artifactId 'kotlinsdk'
      version projectVersion

      from components.java

      artifact(sourceJar) {
        classifier = 'sources'
      }
      artifact(javadocJar) {
        classifier = 'javadoc'
      }
    }
  }
  repositories {
    maven {
      url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username ossrhUsername
        password ossrhPassword
      }
    }
  }
}

def customizePom(pom) {
  pom.withXml {
    def root = asNode()

    // eliminate test-scoped dependencies (no need in maven central POMs)
    root.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    // add all items necessary for maven central publication
    root.children().last() + {
      resolveStrategy = Closure.DELEGATE_FIRST

      description 'Library that allows to perform http requests to IBM z/OSMF REST API with the help of Retorfit2.'
      name 'Zowe-client-Kotlin-SDK'
      url 'https://github.com/zowe/zowe-client-kotlin-sdk'

      issueManagement {
        system 'GitHub'
        url 'https://github.com/zowe/zowe-client-kotlin-sdk/issues'
      }
      licenses {
        license {
          name 'Apache License 2.0'
          url 'https://github.com/zowe/zowe-client-kotlin-sdk/blob/main/License'
          distribution 'repo'
        }
      }
      scm {
        url 'https://github.com/zowe/zowe-client-kotlin-sdk'
        connection 'scm:git:git://github.com/zowe/zowe-client-kotlin-sdk.git'
        developerConnection 'scm:git:git@github.com:zowe/zowe-client-kotlin-sdk.git'
      }
      developers {
        developer {
          id 'zowe-ijmp'
          name 'Zowe IntelliJ Plugin team'
          email 'zowe.robot@gmail.com'
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}
